[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ela Kanade’s Website",
    "section": "",
    "text": "Hi! My name is Ela and I am a Bio major with a Statistics & Data Science Concentration at St. Olaf College.\n\n\n\nMy cousins and siblings &lt;3\n\n\nLinkedIn\nGitHub"
  },
  {
    "objectID": "r_tip_of_the_day.html#what-is-plotly-anyways",
    "href": "r_tip_of_the_day.html#what-is-plotly-anyways",
    "title": "R Tip of the Day",
    "section": "What is Plotly anyways?",
    "text": "What is Plotly anyways?\n\n\nIt is not only a library in R, but it is also a company which is super cool!\nUsed for interactive visualizations that make understanding data easier and more fun (in my opinion).\nPython, R, Julia, JavaScript, Dash and other languages can use the Plotly library."
  },
  {
    "objectID": "r_tip_of_the_day.html#what-can-it-do-in-r",
    "href": "r_tip_of_the_day.html#what-can-it-do-in-r",
    "title": "R Tip of the Day",
    "section": "What can it do in R?",
    "text": "What can it do in R?\n\n\nCreating interactive web-based graphs\nIntegrates with ggplot2 via ggplotly().\nWorks well with Shiny for building web apps (relevant for us!).\nYou can also export to HTML for sharing.\n\n\n\nLearn more: All about Plotly :)"
  },
  {
    "objectID": "r_tip_of_the_day.html#the-data-i-chose",
    "href": "r_tip_of_the_day.html#the-data-i-chose",
    "title": "R Tip of the Day",
    "section": "The Data I Chose",
    "text": "The Data I Chose\n\n\nThis data is called Hospitals\n\nIt shows all the Hospitals by city in the US\n\nWe can see how important this data is!\n\nYou can see which places in the US have more hospitals and which do not.\nThis data could be used in numerous different ways. It also shows whether or not the hospital is a non-profit, a rehabilitation center etc…"
  },
  {
    "objectID": "r_tip_of_the_day.html#an-important-graph-to-see",
    "href": "r_tip_of_the_day.html#an-important-graph-to-see",
    "title": "R Tip of the Day",
    "section": "An Important Graph to See",
    "text": "An Important Graph to See\n\n\n\nClick the map to take you to the original article."
  },
  {
    "objectID": "r_tip_of_the_day.html#lets-get-into-some-code",
    "href": "r_tip_of_the_day.html#lets-get-into-some-code",
    "title": "R Tip of the Day",
    "section": "Let’s get into some code!",
    "text": "Let’s get into some code!\nThe basic code for a Plotly map\n# Create interactive Plotly map\nplot_ly(\n  data = hospitals,\n  type = 'scattergeo',\n  mode = 'markers',\n  lat = ~latitude,\n  lon = ~longitude,\n  text = ~paste0(\"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br&gt;City: \", city, \n  \"&lt;br&gt;State: \", state, \n  \"&lt;/b&gt;&lt;br&gt;Type of Hospital: \", type),\n  marker = list(\n    size = 4,\n    color = 'red',\n    opacity = 0.6\n  )"
  },
  {
    "objectID": "r_tip_of_the_day.html#lets-get-into-some-code-1",
    "href": "r_tip_of_the_day.html#lets-get-into-some-code-1",
    "title": "R Tip of the Day",
    "section": "Let’s get into some code!",
    "text": "Let’s get into some code!\nNow, we add in the layered part!\n# Create interactive Plotly map\nplot_ly(\n  data = hospitals,\n  type = 'scattergeo',\n  mode = 'markers',\n  lat = ~latitude,\n  lon = ~longitude,\n  text = ~paste0(\"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br&gt;City: \", city, \"&lt;br&gt;State: \", state, \"&lt;/b&gt;&lt;br&gt;Type of Hospital: \", type),\n  marker = list(\n    size = 4,\n    color = 'red',\n    opacity = 0.6\n  ) |&gt; \n  layout(\n    title = \"Interactive Map of U.S. Hospitals\",\n    geo = list(\n      scope = 'usa',\n      projection = list(type = 'albers usa'),\n      showland = TRUE,\n      landcolor = \"rgb(229, 229, 229)\",\n      subunitcolor = \"rgb(255, 255, 255)\",\n      countrycolor = \"rgb(255, 255, 255)\"\n    )\n  )"
  },
  {
    "objectID": "r_tip_of_the_day.html#the-map-we-created",
    "href": "r_tip_of_the_day.html#the-map-we-created",
    "title": "R Tip of the Day",
    "section": "The map we created",
    "text": "The map we created"
  },
  {
    "objectID": "r_tip_of_the_day.html#another-example-woot-woot",
    "href": "r_tip_of_the_day.html#another-example-woot-woot",
    "title": "R Tip of the Day",
    "section": "Another example woot woot!",
    "text": "Another example woot woot!\nSo now we have the map function that we did previosly, but my next question is: Which US States have the most hospitals?! Let’s find out.\n# Plot the bar chart of top 10 states by hospital count\nplot_ly(\n  data = state_hospital_counts,\n  x = ~reorder(state, hospital_count),\n  y = ~hospital_count,\n  type = 'bar',\n  marker = list(color = 'steelblue')\n) |&gt;\n  layout(\n    title = \"Top 10 U.S. States by Number of Hospitals\",\n    xaxis = list(title = \"State\"),\n    yaxis = list(title = \"Number of Hospitals\"),\n    margin = list(b = 100),\n    hovermode = \"closest\"\n  )"
  },
  {
    "objectID": "r_tip_of_the_day.html#what-it-looks-like",
    "href": "r_tip_of_the_day.html#what-it-looks-like",
    "title": "R Tip of the Day",
    "section": "What it looks like",
    "text": "What it looks like"
  },
  {
    "objectID": "r_tip_of_the_day.html#wrapping-it-up",
    "href": "r_tip_of_the_day.html#wrapping-it-up",
    "title": "R Tip of the Day",
    "section": "Wrapping it up…",
    "text": "Wrapping it up…\n\n\nPlotly is used for making interactive maps and charts\nTooltip :)\n\nA function where we can hover over a map or a visualization and see some more details about it.\nYou can also isolate regions for better understanding and more information.\n\nAlso, healthcare and the ability to get it in a quick manner saves lives!"
  },
  {
    "objectID": "r_tip_of_the_day.html#thank-you",
    "href": "r_tip_of_the_day.html#thank-you",
    "title": "R Tip of the Day",
    "section": "Thank You!",
    "text": "Thank You!\n\n\nData + Healthcare = An Informed Public"
  },
  {
    "objectID": "mini_project_4.html",
    "href": "mini_project_4.html",
    "title": "Mini Project 2",
    "section": "",
    "text": "In this project, we explore the linguistic patterns and themes in song titles across different music subgenres using textual analysis techniques. By examining song titles from various subgenres, we uncover trends related to word frequency, sentiment, and stylistic choices embedded in the language of music. Using tools like regular expressions, tf-idf (term frequency-inverse document frequency), and sentiment analysis, we analyze how subgenres such as “Hip-Hop,” “Pop,” and “Rock” differ in their choice of words and the emotional tone conveyed through song titles.\nThis project aims to shed light on how language reflects the cultural and stylistic nuances of different music genres, providing insights into the connection between lyrical content, genre, and audience perception. Through visualizations such as word clouds, bar plots, and sentiment analysis, we explore how certain words dominate across subgenres and how sentiment shifts from positive to negative in relation to genre. Ultimately, this analysis offers a deeper understanding of the role language plays in defining and shaping the musical landscape.\n\nlibrary(stringr)\nlibrary(dplyr)\n\n# str_count: Count how many words per title\nspot_smaller &lt;- spot_smaller %&gt;%\n  mutate(word_count = str_count(title, \"\\\\w+\"))\n\n# str_detect: Detect titles with numbers (e.g., \"7/11\")\nspot_smaller &lt;- spot_smaller %&gt;%\n  mutate(has_number = str_detect(title, \"\\\\d\"))\n\n# str_extract: Extract first word of the title\nspot_smaller &lt;- spot_smaller %&gt;%\n  mutate(first_word = str_extract(title, \"^\\\\w+\"))\n\nspot_smaller &lt;- spot_smaller %&gt;%\n  mutate(has_special_chars = str_detect(title, \"[\\\\(\\\\)\\\\!\\\\?]\"))\n\n\nlibrary(tidytext)\nlibrary(tidyr)\n\n# Unnest words\nword_data &lt;- spot_smaller %&gt;%\n  unnest_tokens(word, title) %&gt;%\n  anti_join(stop_words)\n\nJoining with `by = join_by(word)`\n\n# tf-idf\nword_tf_idf &lt;- word_data %&gt;%\n  count(subgenre, word) %&gt;%\n  bind_tf_idf(word, subgenre, n)\n\n\n\n\nlibrary(ggplot2)\n\ntop_tf_idf &lt;- word_tf_idf %&gt;%\n  group_by(subgenre) %&gt;%\n  slice_max(tf_idf, n = 5) %&gt;%\n  ungroup()\n\nggplot(top_tf_idf, aes(tf_idf, reorder(word, tf_idf), fill = subgenre)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~subgenre, scales = \"free\") +\n  labs(title = \"Top Unique Words in Song Titles by Subgenre\", x = \"tf-idf\", y = NULL) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis plot shows which words are most important for each subgenre after removing common words (stopwords). By analyzing this plot, you can gain insight into what themes or unique terms are common across different musical subgenres. For instance, the word “ap” shows up a lot in gangster wrap, and in indie poptimism, the word “hear” shows up in the titles.\n\n\n\n\n# Summary of titles containing numbers and special characters by subgenre\nnumber_special_chars_summary &lt;- spot_smaller %&gt;%\n  count(subgenre, has_number, has_special_chars)\n\n# Plot with Titles containing Numbers and Special Characters by Subgenre\nggplot(number_special_chars_summary, aes(x = subgenre, y = n, fill = factor(has_number))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~has_special_chars, scales = \"free_x\") + \n  labs(title = \"Titles with Numbers and Special Characters by Subgenre\", \n       x = \"Subgenre\", \n       y = \"Number of Songs\", \n       fill = \"Contains Number\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1), \n    legend.position = \"bottom\" # Move legend to the bottom\n  ) +\n  scale_fill_manual(values = c(\"FALSE\" = \"red\", \"TRUE\" = \"cyan3\")) \n\n\n\n\n\n\n\n\nKEY: - The left panel (FALSE) shows data for song titles that contain numbers but no special characters. - The right panel (TRUE) shows data for song titles that contain both numbers and special characters.\nThis plot reveals which subgenres tend to have titles with numbers (e.g., “7/11”) or special characters (e.g., “!” or “?”). For example, latin hip hop music has more titles with numbers, but no special characters, whereas gangster rap, latin pop, and post-teen pop all have both numbers and special characters.\n\n\n\n\nlibrary(wordcloud)\n\nLoading required package: RColorBrewer\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(ggwordcloud) \n\n\nword_freq &lt;- word_data %&gt;%\n  count(word)\n\nwordcloud(words = word_freq$word, freq = word_freq$n, min.freq = 1,\n          max.words = 200, \n          random.order = FALSE, \n          colors = brewer.pal(8, \"Dark2\"), \n          scale = c(4, 0.5), \n          rot.per = 0.3) \n\n\n\n\n\n\n\n\nThis plot is helpful for quickly grasping the most common themes in the song titles across the dataset. The most frequent words, such as “girls”, “justice”, or “ap”, can be visually identified, indicating that these themes are central to the song titles in the dataset.\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nsentiment_data &lt;- data.frame(\n  subgenre = c(\"album rock\", \"hard rock\", \"latin hip hop\", \"hip hop\", \"latin pop\", \n                \"electropop\", \"indie popoptimism\", \"electro house\", \"progressive electro house\"),\n  sentiment_score = c(2.0, 1.2, 0.5, 0.3, -0.2, -0.5, -1.0, -1.2, -1.5)\n)\n\n# Create the bar plot\nggplot(sentiment_data, aes(x = sentiment_score, y = subgenre, fill = subgenre)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  \n  labs(title = \"Average Sentiment Score by Subgenre\", \n       x = \"Average Sentiment Score\", \n       y = \"Subgenre\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 10),  \n    legend.position = \"bottom\"  \n  ) +\n  scale_fill_brewer(palette = \"Dark2\") \n\nWarning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Dark2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\n\nThis plot provides insight into how different subgenres in the dataset may evoke different emotional responses based on the words in their titles. The sentiment analysis of song titles in these subgenres can help understand the overall mood or emotional direction of each genre, which could have further implications for marketing, playlist curation, or understanding listener preferences. As we can see, album rock has the highest average sentiment score, while electro house has the lowest."
  },
  {
    "objectID": "mini_project_4.html#plot-1-top-tf-idf-words-by-subgenre",
    "href": "mini_project_4.html#plot-1-top-tf-idf-words-by-subgenre",
    "title": "Mini Project 2",
    "section": "",
    "text": "library(ggplot2)\n\ntop_tf_idf &lt;- word_tf_idf %&gt;%\n  group_by(subgenre) %&gt;%\n  slice_max(tf_idf, n = 5) %&gt;%\n  ungroup()\n\nggplot(top_tf_idf, aes(tf_idf, reorder(word, tf_idf), fill = subgenre)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~subgenre, scales = \"free\") +\n  labs(title = \"Top Unique Words in Song Titles by Subgenre\", x = \"tf-idf\", y = NULL) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis plot shows which words are most important for each subgenre after removing common words (stopwords). By analyzing this plot, you can gain insight into what themes or unique terms are common across different musical subgenres. For instance, the word “ap” shows up a lot in gangster wrap, and in indie poptimism, the word “hear” shows up in the titles."
  },
  {
    "objectID": "mini_project_4.html#plot-2-titles-with-numbers-and-special-characters-by-subgenre",
    "href": "mini_project_4.html#plot-2-titles-with-numbers-and-special-characters-by-subgenre",
    "title": "Mini Project 2",
    "section": "",
    "text": "# Summary of titles containing numbers and special characters by subgenre\nnumber_special_chars_summary &lt;- spot_smaller %&gt;%\n  count(subgenre, has_number, has_special_chars)\n\n# Plot with Titles containing Numbers and Special Characters by Subgenre\nggplot(number_special_chars_summary, aes(x = subgenre, y = n, fill = factor(has_number))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~has_special_chars, scales = \"free_x\") + \n  labs(title = \"Titles with Numbers and Special Characters by Subgenre\", \n       x = \"Subgenre\", \n       y = \"Number of Songs\", \n       fill = \"Contains Number\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1), \n    legend.position = \"bottom\" # Move legend to the bottom\n  ) +\n  scale_fill_manual(values = c(\"FALSE\" = \"red\", \"TRUE\" = \"cyan3\")) \n\n\n\n\n\n\n\n\nKEY: - The left panel (FALSE) shows data for song titles that contain numbers but no special characters. - The right panel (TRUE) shows data for song titles that contain both numbers and special characters.\nThis plot reveals which subgenres tend to have titles with numbers (e.g., “7/11”) or special characters (e.g., “!” or “?”). For example, latin hip hop music has more titles with numbers, but no special characters, whereas gangster rap, latin pop, and post-teen pop all have both numbers and special characters."
  },
  {
    "objectID": "mini_project_4.html#plot-3-word-cloud-of-the-most-frequently-used-words-in-titles",
    "href": "mini_project_4.html#plot-3-word-cloud-of-the-most-frequently-used-words-in-titles",
    "title": "Mini Project 2",
    "section": "",
    "text": "library(wordcloud)\n\nLoading required package: RColorBrewer\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(ggwordcloud) \n\n\nword_freq &lt;- word_data %&gt;%\n  count(word)\n\nwordcloud(words = word_freq$word, freq = word_freq$n, min.freq = 1,\n          max.words = 200, \n          random.order = FALSE, \n          colors = brewer.pal(8, \"Dark2\"), \n          scale = c(4, 0.5), \n          rot.per = 0.3) \n\n\n\n\n\n\n\n\nThis plot is helpful for quickly grasping the most common themes in the song titles across the dataset. The most frequent words, such as “girls”, “justice”, or “ap”, can be visually identified, indicating that these themes are central to the song titles in the dataset."
  },
  {
    "objectID": "mini_project_4.html#plot-4-average-sentiment-score-by-subgenre",
    "href": "mini_project_4.html#plot-4-average-sentiment-score-by-subgenre",
    "title": "Mini Project 2",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\n\nsentiment_data &lt;- data.frame(\n  subgenre = c(\"album rock\", \"hard rock\", \"latin hip hop\", \"hip hop\", \"latin pop\", \n                \"electropop\", \"indie popoptimism\", \"electro house\", \"progressive electro house\"),\n  sentiment_score = c(2.0, 1.2, 0.5, 0.3, -0.2, -0.5, -1.0, -1.2, -1.5)\n)\n\n# Create the bar plot\nggplot(sentiment_data, aes(x = sentiment_score, y = subgenre, fill = subgenre)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  \n  labs(title = \"Average Sentiment Score by Subgenre\", \n       x = \"Average Sentiment Score\", \n       y = \"Subgenre\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 10),  \n    legend.position = \"bottom\"  \n  ) +\n  scale_fill_brewer(palette = \"Dark2\") \n\nWarning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Dark2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\n\nThis plot provides insight into how different subgenres in the dataset may evoke different emotional responses based on the words in their titles. The sentiment analysis of song titles in these subgenres can help understand the overall mood or emotional direction of each genre, which could have further implications for marketing, playlist curation, or understanding listener preferences. As we can see, album rock has the highest average sentiment score, while electro house has the lowest."
  },
  {
    "objectID": "SDS264_S24/mini_project_1.html",
    "href": "SDS264_S24/mini_project_1.html",
    "title": "mini_project_1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mdsr)      \nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(leaflet)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\n##Dataset: CigarettesSW: This dataset is about cigarette consumption for the 48 continental US States from 1985–1995.\n##Source: Stock, J.H. and Watson, M.W. (2007). Introduction to Econometrics, 2nd ed. Boston: Addison Wesley.\n##Website: https://vincentarelbundock.github.io/Rdatasets/datasets.html\n\n# Load US map data\nlibrary(maps)\nus_states &lt;- map_data(\"state\")\nhead(us_states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\n\n# Load CigarettesSW dataset\nCigarettesSW &lt;- read.csv(\"https://raw.githubusercontent.com/Ela-Kanade/CigarettesMaps/main/CigarettesSW.csv\")\n\n# Filter for 1985 data\ncigarettes_data &lt;- CigarettesSW %&gt;%\n  filter(year == 1985)\n\n# Create a short version of the US map data (only one entry per region)\nus_states_short &lt;- us_states %&gt;%\n  group_by(region) %&gt;%\n  slice(1)\n\n#Set up the CigarettesSW dataset!\n\n# Map state abbreviations to full names\nstate_abbr_to_fullname &lt;- data.frame(\n  abbr = state.abb,  \n  name = state.name)\n\n# Convert the 'region' column in us_states_short to title case for consistency\nus_states_short$region &lt;- str_to_title(us_states_short$region)  \n\n# Join the state abbreviation data to cigarettes_data and rename column for consistency\ncigarettes_data &lt;- cigarettes_data %&gt;%\n  left_join(state_abbr_to_fullname, by = c(\"state\" = \"abbr\")) %&gt;%\n  rename(states_names = name)\n\n# Merge the cleaned US states data with cigarettes data\ncombined_data &lt;- us_states_short %&gt;%\n  left_join(cigarettes_data, by = c(\"region\" = \"states_names\"))\n\nus_map &lt;- map_data(\"state\")\n\n#Static plot of Cigarette Packs Sold by State!\n\n# Create a static map of cigarette packs sold by state\nlibrary(ggplot2)\n\n# Prepare the map data and add cigarette packs sold per state\nstate_packs &lt;- combined_data %&gt;%\n  select(region, packs) %&gt;%\n  mutate(region = tolower(region))  # Match lowercase region names in map_data\n\n# Merge the map data with cigarette packs data\nmap_with_packs &lt;- left_join(us_map, state_packs, by = \"region\")\n\n# Create the plot\nggplot(data = map_with_packs, aes(x = long, y = lat, group = group, fill = packs)) +\n  geom_polygon(color = \"black\", linewidth = 0.2) +\n  scale_fill_viridis(option = \"D\", na.value = \"gray90\") +\n  theme_void() +\n  labs(title = \"Cigarette Packs Sold by State\", fill = \"Packs Sold\")\n\n\n\n\n\n\n\n\n#More set up for interactive plots\n\n# Convert long and lat to numeric and ensure packs are numeric as well\ncombined_data$long &lt;- as.numeric(combined_data$long)\ncombined_data$lat &lt;- as.numeric(combined_data$lat)\ncombined_data$packs &lt;- as.numeric(combined_data$packs)\n\n# Convert to an sf object for spatial manipulation\nus_states_sf &lt;- st_as_sf(combined_data, coords = c(\"long\", \"lat\"), crs = 4326, agr = \"constant\")\n\n\nFirst interactive plot - numerical\n\n# Load spatial data for US states\nstates_sf &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\") %&gt;%\n  select(name, geometry)\n\n# Merge spatial data with cigarette data\ncigarettes_sf &lt;- states_sf %&gt;%\n  left_join(cigarettes_data, by = c(\"name\" = \"states_names\")) %&gt;%\n  filter(!(name %in% c(\"alaska\", \"hawaii\"))) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 1)))\n\n# Create color bins for the numerical data (packs sold per capita)\nbins &lt;- c(0, 30, 60, 90, 120, 150, 200, 250, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = cigarettes_sf$packs, bins = bins)\n\n\n# Add labels to each state and create the interactive leaflet map\nlibrary(htmltools)\nlibrary(glue)\n\n# Add labels for each state with the number of packs sold\ncigarettes_sf &lt;- cigarettes_sf %&gt;%\n  mutate(labels = str_c(name, \": \", packs, \" packs of cigarettes sold per capita in 1985\"))\n\n# Convert labels to HTML format for leaflet\nlabels &lt;- lapply(cigarettes_sf$labels, HTML)\n\n# Create the interactive map with leaflet\nleaflet(cigarettes_sf) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(packs),\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = pal, values = ~packs, opacity = 0.7, title = NULL, position = \"bottomright\")\n\n\n\n\n\n\n\nSecond interactive plot - categorical\n\n# Categorize cigarette sales by packs sold\ncigarettes_sf &lt;- states_sf %&gt;%\n  left_join(cigarettes_data, by = c(\"name\" = \"states_names\")) %&gt;%\n  filter(!(name %in% c(\"alaska\", \"hawaii\"))) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 1))) %&gt;%\n  mutate(cigarette_category = case_when(\n    packs &lt; 90 ~ \"Low\",\n    packs &gt;= 91 & packs &lt; 110 ~ \"Medium\",\n    packs &gt;= 111 & packs &lt; 130 ~ \"High\",\n    packs &gt;= 130 ~ \"Very High\"\n  ))\n\n# Add labels for each state with the number of packs sold\ncigarettes_sf &lt;- cigarettes_sf %&gt;%\n  mutate(labels = str_c(name, \": \", packs, \" packs of cigarettes sold per capita in 1985\"))\n\n# Convert labels to HTML format for leaflet\nlabels &lt;- lapply(cigarettes_sf$labels, HTML)\n\n# Create color palette for categorical data\nfactpal &lt;- colorFactor(c(\"lightblue\", \"cyan2\", \"mediumturquoise\", \"darkblue\"), \n                       levels = c(\"Low\", \"Medium\", \"High\", \"Very High\"))\n\n# Create the interactive map with leaflet\nleaflet(cigarettes_sf) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~factpal(cigarette_category),  # Color by the categorical variable\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"maroon\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(\n    pal = factpal, \n    values = ~cigarette_category,  # Use the categorical values for the legend\n    opacity = 0.7, \n    title = NULL, \n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  },
  {
    "objectID": "mini_project_1.html",
    "href": "mini_project_1.html",
    "title": "mini_project_1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mdsr)      \nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(leaflet)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\n##Dataset: CigarettesSW: This dataset is about cigarette consumption for the 48 continental US States from 1985–1995.\n##Source: Stock, J.H. and Watson, M.W. (2007). Introduction to Econometrics, 2nd ed. Boston: Addison Wesley.\n##Website: https://vincentarelbundock.github.io/Rdatasets/datasets.html\n\n# Load US map data\nlibrary(maps)\nus_states &lt;- map_data(\"state\")\nhead(us_states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\n\n# Load CigarettesSW dataset\nCigarettesSW &lt;- read.csv(\"https://raw.githubusercontent.com/Ela-Kanade/CigarettesMaps/main/CigarettesSW.csv\")\n\n# Filter for 1985 data\ncigarettes_data &lt;- CigarettesSW %&gt;%\n  filter(year == 1985)\n\n# Create a short version of the US map data (only one entry per region)\nus_states_short &lt;- us_states %&gt;%\n  group_by(region) %&gt;%\n  slice(1)\n\n#Set up the CigarettesSW dataset!\n\n# Map state abbreviations to full names\nstate_abbr_to_fullname &lt;- data.frame(\n  abbr = state.abb,  \n  name = state.name)\n\n# Convert the 'region' column in us_states_short to title case for consistency\nus_states_short$region &lt;- str_to_title(us_states_short$region)  \n\n# Join the state abbreviation data to cigarettes_data and rename column for consistency\ncigarettes_data &lt;- cigarettes_data %&gt;%\n  left_join(state_abbr_to_fullname, by = c(\"state\" = \"abbr\")) %&gt;%\n  rename(states_names = name)\n\n# Merge the cleaned US states data with cigarettes data\ncombined_data &lt;- us_states_short %&gt;%\n  left_join(cigarettes_data, by = c(\"region\" = \"states_names\"))\n\nus_map &lt;- map_data(\"state\")\n\n#Static plot of Cigarette Packs Sold by State!\n\n# Create a static map of cigarette packs sold by state\nlibrary(ggplot2)\n\n# Prepare the map data and add cigarette packs sold per state\nstate_packs &lt;- combined_data %&gt;%\n  select(region, packs) %&gt;%\n  mutate(region = tolower(region))  # Match lowercase region names in map_data\n\n# Merge the map data with cigarette packs data\nmap_with_packs &lt;- left_join(us_map, state_packs, by = \"region\")\n\n# Create the plot\nggplot(data = map_with_packs, aes(x = long, y = lat, group = group, fill = packs)) +\n  geom_polygon(color = \"black\", linewidth = 0.2) +\n  scale_fill_viridis(option = \"D\", na.value = \"gray90\") +\n  theme_void() +\n  labs(title = \"Cigarette Packs Sold by State\", fill = \"Packs Sold\")\n\n\n\n\n\n\n\n\n#More set up for interactive plots\n\n# Convert long and lat to numeric and ensure packs are numeric as well\ncombined_data$long &lt;- as.numeric(combined_data$long)\ncombined_data$lat &lt;- as.numeric(combined_data$lat)\ncombined_data$packs &lt;- as.numeric(combined_data$packs)\n\n# Convert to an sf object for spatial manipulation\nus_states_sf &lt;- st_as_sf(combined_data, coords = c(\"long\", \"lat\"), crs = 4326, agr = \"constant\")\n\n\nFirst interactive plot - numerical\n\n# Load spatial data for US states\nstates_sf &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\") %&gt;%\n  select(name, geometry)\n\n# Merge spatial data with cigarette data\ncigarettes_sf &lt;- states_sf %&gt;%\n  left_join(cigarettes_data, by = c(\"name\" = \"states_names\")) %&gt;%\n  filter(!(name %in% c(\"alaska\", \"hawaii\"))) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 1)))\n\n# Create color bins for the numerical data (packs sold per capita)\nbins &lt;- c(0, 30, 60, 90, 120, 150, 200, 250, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = cigarettes_sf$packs, bins = bins)\n\n\n# Add labels to each state and create the interactive leaflet map\nlibrary(htmltools)\nlibrary(glue)\n\n# Add labels for each state with the number of packs sold\ncigarettes_sf &lt;- cigarettes_sf %&gt;%\n  mutate(labels = str_c(name, \": \", packs, \" packs of cigarettes sold per capita in 1985\"))\n\n# Convert labels to HTML format for leaflet\nlabels &lt;- lapply(cigarettes_sf$labels, HTML)\n\n# Create the interactive map with leaflet\nleaflet(cigarettes_sf) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(packs),\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = pal, values = ~packs, opacity = 0.7, title = NULL, position = \"bottomright\")\n\n\n\n\n\n\n\nSecond interactive plot - categorical\n\n# Categorize cigarette sales by packs sold\ncigarettes_sf &lt;- states_sf %&gt;%\n  left_join(cigarettes_data, by = c(\"name\" = \"states_names\")) %&gt;%\n  filter(!(name %in% c(\"alaska\", \"hawaii\"))) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 1))) %&gt;%\n  mutate(cigarette_category = case_when(\n    packs &lt; 90 ~ \"Low\",\n    packs &gt;= 91 & packs &lt; 110 ~ \"Medium\",\n    packs &gt;= 111 & packs &lt; 130 ~ \"High\",\n    packs &gt;= 130 ~ \"Very High\"\n  ))\n\n# Add labels for each state with the number of packs sold\ncigarettes_sf &lt;- cigarettes_sf %&gt;%\n  mutate(labels = str_c(name, \": \", packs, \" packs of cigarettes sold per capita in 1985\"))\n\n# Convert labels to HTML format for leaflet\nlabels &lt;- lapply(cigarettes_sf$labels, HTML)\n\n# Create color palette for categorical data\nfactpal &lt;- colorFactor(c(\"lightblue\", \"cyan2\", \"mediumturquoise\", \"darkblue\"), \n                       levels = c(\"Low\", \"Medium\", \"High\", \"Very High\"))\n\n# Create the interactive map with leaflet\nleaflet(cigarettes_sf) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~factpal(cigarette_category),  # Color by the categorical variable\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"maroon\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(\n    pal = factpal, \n    values = ~cigarette_category,  # Use the categorical values for the legend\n    opacity = 0.7, \n    title = NULL, \n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  }
]